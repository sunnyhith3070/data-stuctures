#selection sort
def selectionsort(a):
    l=len(a)
    for i in range(l-1):
        mi=i
        for j in range(i+1,l):
            if a[j] < a[mi]:
                mi=j
        if mi != i :
            a[i],a[mi]=a[mi],a[i]

a=[2,5,3,9,7,4,1]
selectionsort(a)
print(a)
#O(n2)
#sp O(1)

#bubble sort
def bubblesort(a):
    l=len(a)
    for j in range(l-1):
        for i in range(l-j-1):
            if a[i] > a[i+1]:
                a[i],a[i+1]=a[i+1],a[i]
            
    
a=[21,54,63,91,78,13,10]
bubblesort(a)
print(a)
#O(n2)#best case O(n)
#sp O(1)
#modification
def bubblesort(a):
    l=len(a)
    for j in range(l-1):
        swps=0
        for i in range(l-j-1):
            if a[i] > a[i+1]:
                a[i],a[i+1]=a[i+1],a[i]
                swps+=1
        if swps==0:
            break

#insertion sort
def insertionsort(a):
    l=len(a)
    for i in range(1,l):
        temp=a[i]
        j=i-1
        while j>=0 and temp < a[j]:
            a[j+1]=a[j]
            j=j-1
        a[j+1]=temp
        
a=[21,54,63,91,78,13,10]
insertionsort(a)
print(a)
#O(n2)#best case O(n)
#sp O(1)

#shell sort
def shellsort(a):
    h=int(input())
    l=len(a)
    while h>0:
        for i in range(h,l):
            temp=a[i]
            j=i-h
            while j>=0 and temp < a[j]:
                a[j+h]=a[j]
                j=j-h
            a[j+h]=temp
        h=h-2

a=[21,54,63,91,78,13,10]
shellsort(a)
print(a)
#O(n(logn)2) or O(n**1.25)
#sp O(1)

#quick sort
def quicksort(a):
    sort(a,0,len(a)-1)
def sort(a,low,up):
    if low >= up:
        return
    p=partition(a,low,up)
    sort(a,low,p-1)
    sort(a,p+1,up)
def partition(a,low,up):
    p=a[low]
    i=low+1
    j=up
    while i<=j:
        while a[i]<p and i<up:
            i+=1
        while a[j]>p:
            j-=1
        if i<j:
            temp=a[j]
            a[j]=a[i]
            a[i]=temp
            i=i+1
            j=j-1
        else:
            break
    a[low]=a[j]
    a[j]=p
    return j
    
    
     
a=[21,54,63,91,78,13,10]
quicksort(a)
print(a)
#best case O(nlogn) worst case O(n**2)
#space comp O(logn)

#mergesort recursively
def mergesort(a):
    l=len(a)
    temp=[None]*l
    sort(a,temp,0,l-1)
def sort(a,temp,low,up):
    if low>=up:
        return
    mid=(low+up) //2
    sort(a,temp,low,mid)
    sort(a,temp,mid+1,up)
    merge(a,temp,low,mid,mid+1,up)
    copy(a,temp,low,up)
    
def merge(a,temp,low1,up1,low2,up2):
    i=low1
    j=low2
    k=0
    while i<=up1 and j<=up2:
        if a[i]<a[j]:
            temp[k]=a[i]
            i+=1
        else:
            temp[k]=a[j]
            j+=1
        k+=1
    
    while i<=up1:
        temp[k]=a[i]
        i+=1
        k+=1
    while j<=up2:
        temp[k]=a[j]
        j+=1
        k+=1
    
def copy(a,temp,low,up):
    i=low
    j=up
    k=0
    while i<=j:
        a[i]=temp[k]
        k+=1
        i+=1

a=[103,21,54,59,6,31,78,13,10]
mergesort(a)
print(a)

#mergesort iterative
def mergesort(a):
    l=len(a)
    temp=[None]*l
    size=1
    while size<=l-1:
        sortpass(a,temp,size,l)
        size=2*size
    
def sortpass(a,temp,size,n):
    low1=0
    while low1+size <= n-1:
        up1=low1+size-1
        low2=low1+size
        up2=low2+size-1
        if up2>=n:
            up2=n-1
        merge(a,temp,low1,up1,low2,up2)
        low1=up2+1
    for i in range(low1,n):
        temp[i]=a[i]
    copy(a,temp,n)
    
def merge(a,temp,low1,up1,low2,up2):
    i=low1
    j=low2
    k=low1
    while i<=up1 and j<=up2:
        if a[i]<a[j]:
            temp[k]=a[i]
            i+=1
        else:
            temp[k]=a[j]
            j+=1
        k+=1
    
    while i<=up1:
        temp[k]=a[i]
        i+=1
        k+=1
    while j<=up2:
        temp[k]=a[j]
        j+=1
        k+=1
    
def copy(a,temp,n):
    for i in range(n):
        a[i]=temp[i]

a=[103,21,54,59,6,31,78,13,10]
mergesort(a)
print(a)

#O(nlogn)
#sc O(n)









